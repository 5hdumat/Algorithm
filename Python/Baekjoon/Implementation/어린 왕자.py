# https://www.acmicpc.net/problem/1004
# Hint!
# 문제는, 언제 진입/이탈이 불가피한 지를 파악하는 것입니다. 
# 공책에 아무데나 원을 그리고 출발지와 도착점을 찍어보세요. 

# 그림은 아래 네가지 상황 중 하나일 것입니다.
#   - 출발지와 도착지가 모두 원이 포함될 때,
#   - 출발지가 원에 포함되고, 도착지는 포함되지 않을 때.
#   - 출발지가 원에 포함되지 않고, 도착지는 포함될 때.
#   - 출발지와 도착지가 모두 원에 포함되지 않을 때.

# 그러고 나서, 진입/이탈을 최대한 하지 않는 방향으로 선을 그어보시면, 
# 2번과 3번의 경우에만 원의 경계를 반드시 진입/이탈해야 한다는 것을 알 수가 있습니다. 
# 즉, 출발지나 도착지 중 한 점만 포함하는 원의 개수를 구하는 문제입니다. 1번의 경우에는 원의 경계에 갈 필요없이 직선을 그으시면 되고, 4번의 경우에는 원을 피해 선을 그리면 피할 수 있을겁니다. 
# 이제 위의 그림을 다시 보면 이해가 쉬워집니다. 
# 즉, 입력으로 주어진 어린왕자의 출발지 좌표만을 포함하는 행성계(원)와 도착지 좌표만을 포함하는 행성계의 개수를 구해 더하면 됩니다. 
# 두 점을 모두 포함하는 행성계는 제외해야 한다는 점을 잊지 마세요! 
# 여기서 점이 원에 포함하는지 확인하려면, 원의 중심과 점 사이의 거리가 반지름보다 큰지 작은지를 파악해야합니다. 
# 거리가 반지름보다 크면, 원 밖에 있는 점이고 작으면 원 안에 있는 점이겠죠? 
# 이러한 생각으로 아래와 같은 코드로 풀이하였습니다.

import sys

test_case = int(input())

for _ in range(test_case):
    x1, y1, x2, y2 = map(int, sys.stdin.readline().split())
    
    planet_cnt = int(input())
    
    cnt = 0
    for _ in range(planet_cnt):
        px, py, pr = map(int, sys.stdin.readline().split())
        
        # 출발지와 행성계 중심까지의 거리
        r1 = ((x1-px) ** 2 + (y1-py) ** 2) ** (1/2)
        
        # 도착지와 행성계 중심까지의 거리
        r2 = ((x2-px) ** 2 + (y2-py) ** 2) ** (1/2)
        
        tmp = [r1, r2, pr]
        
        # 출발점이나 도착점이 행성계 경계에 걸쳐진 경우 역시 입력으로 주어지지 않는다.
        if r1 == pr or r2 == pr:
            pass
        
        # 출발지, 도착지 중 1개 이상이 행성계에 포함되어있다면?
        if r1 < pr or r2 < pr: 
            # 둘다 포함되어있다면 pass
            if r1 < pr and r2 < pr: 
                pass
            else: 
                cnt += 1
        
    print(cnt)
            
            